{"version":3,"sources":["components/PokemonCard.js","components/PokemonList.js","services/GetDataFromServer.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["PokemonCard","props","className","src","picture","alt","name","id","charAt","toUpperCase","slice","type","map","pokemonType","index","key","PrintTypes","PokemonList","inputValue","length","pokemons","filter","pokemon","includes","GetDataFromServer","fetch","then","response","json","data","results","pokemonUnformatted","url","sprites","front_default","types","Filter","placeholder","onChange","handleInputValue","App","state","bind","promises","Promise","all","setState","event","inputValueEvent","target","value","this","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f34a7aea.chunk.js","sourcesContent":["import React from \"react\"\nimport \"../styles/_pokemon-card.scss\"\n\n\n\nconst PrintTypes = (props) => {\n    return props.type.map((pokemonType, index) => {\n        if (pokemonType.type.name === \"poison\") {\n            return (\n                <li className=\"pokemon__list-item pokemon__poison\" key={index}>{pokemonType.type.name}</li>\n            )\n        } else if (pokemonType.type.name === \"grass\") {\n            return (\n                <li className=\"pokemon__list-item pokemon__grass\" key={index}>{pokemonType.type.name}</li>\n            )\n        } else if (pokemonType.type.name === \"water\") {\n            return (\n                <li className=\"pokemon__list-item pokemon__water\" key={index}>{pokemonType.type.name}</li>\n            )\n        } else if (pokemonType.type.name === \"bug\") {\n            return (\n                <li className=\"pokemon__list-item pokemon__bug\" key={index}>{pokemonType.type.name}</li>\n            )\n        } else if (pokemonType.type.name === \"fire\") {\n            return (\n                <li className=\"pokemon__list-item pokemon__fire\" key={index}>{pokemonType.type.name}</li>\n            )\n        } else if (pokemonType.type.name === \"flying\") {\n            return (\n                <li className=\"pokemon__list-item pokemon__flying\" key={index}>{pokemonType.type.name}</li>\n            )\n        } else if (pokemonType.type.name === \"normal\") {\n            return (\n                <li className=\"pokemon__list-item pokemon__normal\" key={index}>{pokemonType.type.name}</li>\n            )\n        } else if (pokemonType.type.name === \"electric\") {\n            return (\n                <li className=\"pokemon__list-item pokemon__electric\" key={index}>{pokemonType.type.name}</li>\n            )\n        }\n\n    })\n}\n\n\nconst PokemonCard = (props) => {\n    return (\n        <div className=\"pokemon__card\">\n            <div className=\"pokemon__preview\">\n                <img className=\"pokemon__picture\" src={props.picture} alt={props.name} />\n                <h5 className=\"pokemon__id\">ID/{props.id}</h5>\n            </div>\n            <div className=\"pokemon__name-container\">\n                <h2 className=\"pokemon__name\">{props.name.charAt(0).toUpperCase() + props.name.slice(1)}</h2>\n                <ul className=\"pokemon__types-list\">{PrintTypes(props)}</ul>\n            </div>\n        </div>\n    )\n\n};\n\nexport default PokemonCard;","import React from \"react\";\nimport PokemonCard from \"../components/PokemonCard\"\nimport \"../styles/_pokemon-list.scss\"\n\n\nconst PokemonList = (props) => {\n    if (props.inputValue.length > 1) {\n        return (\n            <ul className=\"pokemon__list-container\">\n                {props.pokemons.filter(pokemon => pokemon.name.includes(props.inputValue))\n                    .map((pokemon, index) => {\n                        return (\n                            <PokemonCard key={index} name={pokemon.name} id={pokemon.id} picture={pokemon.picture} type={pokemon.type} />\n                        )\n                    })}\n            </ul>\n        )\n    } else {\n        return (\n            <ul className=\"pokemon__list-container\">\n                {props.pokemons.map((pokemon, index) => {\n                    return (\n                        <PokemonCard key={index} name={pokemon.name} id={pokemon.id} picture={pokemon.picture} type={pokemon.type} />\n                    )\n                })}\n            </ul>\n        )\n    }\n}\n\n\nexport default PokemonList;","\n\nconst GetDataFromServer = () => {\n    const url = \"https://pokeapi.co/api/v2/pokemon/?limit=25\"\n    return (\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                return data.results.map(pokemonUnformatted => {\n                    return (\n                        fetch(pokemonUnformatted.url)\n                            .then(response => response.json())\n                            .then(data => {\n                                return {\n                                    name: data.name,\n                                    id: data.id,\n                                    picture: data.sprites.front_default,\n                                    type: data.types\n                                }\n                            }))\n                })\n            })\n    )\n\n};\n\n\n\nexport default GetDataFromServer;","import React from \"react\";\nimport \"../styles/_filter.scss\"\n\nconst Filter = (props) => {\n    return (\n        <input className=\"pokemon__filter\" type=\"text\" placeholder=\"Search your Pokemon\" onChange={props.handleInputValue} />\n    )\n}\n\n\nexport default Filter;","import React from 'react';\nimport './styles/_app.scss';\nimport PokemonList from \"./components/PokemonList\"\nimport GetDataFromServer from \"./services/GetDataFromServer\"\nimport Filter from \"./components/Filter\"\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      pokemons: [],\n      inputValue: \"\"\n    }\n\n    this.handleInputValue = this.handleInputValue.bind(this)\n  }\n\n  componentDidMount() {\n    GetDataFromServer()\n      .then((promises) => Promise.all(promises))\n      .then(data => {\n        this.setState({\n          pokemons: data\n        });\n      });\n  }\n\n  handleInputValue(event) {\n    const inputValueEvent = event.target.value;\n    this.setState({\n      inputValue: inputValueEvent\n    })\n    console.log(this.state.pokemons)\n  }\n\n  render() {\n    return (\n      <div className=\"pokemon__container\" >\n        <h1 className=\"pokemon__title\">Pok√©dex</h1>\n        <Filter handleInputValue={this.handleInputValue} />\n        <PokemonList inputValue={this.state.inputValue} pokemons={this.state.pokemons} />\n      </div>\n    );\n  };\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}